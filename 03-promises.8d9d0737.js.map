{"version":3,"sources":["js/03-promises.js"],"names":["promiseForm","document","querySelector","delayField","stepField","amountField","addEventListener","onSubmit","submitInfo","createPromise","position","delay","promise","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","event","preventDefault","delayNumber","Number","value","step","amount","console","log","i","then","catch"],"mappings":";AAAA,MAAMA,EAAcC,SAASC,cAAc,SACrCC,EAAaF,SAASC,cAAc,yBACpCE,EAAYH,SAASC,cAAc,wBACnCG,EAAcJ,SAASC,cAAc,0BAG3CF,EAAYM,iBAAiB,SAAUC,GAGvC,IAAIC,EAAa,GAGjB,SAASC,EAAcC,EAAUC,GAWxBC,OATS,IAAIC,QAAQ,CAACC,EAASC,KAChCC,MAAAA,EAAgBC,KAAKC,SAAW,GACtCC,WAAW,KACLH,EACFF,EAAQ,CAAEJ,SAAAA,EAAUC,MAAAA,IAEpBI,EAAO,CAAEL,SAAAA,EAAUC,MAAAA,KACpBA,KAOH,SAASJ,EAASa,GAClBA,EAAMC,iBACFC,IAAAA,EAAcC,OAAOpB,EAAWqB,OAC9BC,MAAAA,EAAOF,OAAOnB,EAAUoB,OACxBE,EAASH,OAAOlB,EAAYmB,OAEhCG,QAAQC,IAAIN,GAET,IAAA,IAAIO,EAAI,EAAGA,GAAKH,EAAQG,GAAK,EAC/BpB,EAAcoB,EAAGP,GACdQ,KAAK,EAAGpB,SAAAA,EAAUC,MAAAA,MACtBgB,QAAQC,2BAA2BlB,QAAeC,SAE9CoB,MAAM,EAAGrB,SAAAA,EAAUC,MAAAA,MACvBgB,QAAQC,0BAA0BlB,QAAeC,SAEjDW,GAAeG","file":"03-promises.8d9d0737.js","sourceRoot":"../src","sourcesContent":["const promiseForm = document.querySelector('.form')\nconst delayField = document.querySelector('input[name = \"delay\"]');\nconst stepField = document.querySelector('input[name = \"step\"]');\nconst amountField = document.querySelector('input[name = \"amount\"]');\n\n\npromiseForm.addEventListener('submit', onSubmit);\n\n\nlet submitInfo = {};\n\n\nfunction createPromise(position, delay) {\n  \n  const promise = new Promise((resolve, reject) => {\n  const shouldResolve = Math.random() > 0.3;\n  setTimeout(() => {\n    if (shouldResolve) {\n      resolve({ position, delay });\n  } else {\n      reject({ position, delay });\n  }},delay)\n  })\n  return promise;\n}\n\n\n\n  function onSubmit(event) {\n  event.preventDefault()\n  let delayNumber = Number(delayField.value);\n  const step = Number(stepField.value);\n  const amount = Number(amountField.value);\n\n    console.log(delayNumber);\n    \n  for (let i = 1; i <= amount; i += 1) {\n     createPromise(i, delayNumber)\n       .then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n       .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n    delayNumber += step;\n  }\n    \n}"]}